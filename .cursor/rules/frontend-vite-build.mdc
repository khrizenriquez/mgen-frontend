---
alwaysApply: true
description: Vite build configuration and deployment patterns for the donations frontend
---

# Vite Build & Deployment

## Vite Configuration
Use the established vite.config.js patterns:

```javascript
// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  
  // Path aliases for clean imports
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@core': path.resolve(__dirname, './src/core'),
      '@components': path.resolve(__dirname, './src/components'),
      '@pages': path.resolve(__dirname, './src/pages'),
      '@styles': path.resolve(__dirname, './src/styles'),
      '@hooks': path.resolve(__dirname, './src/hooks'),
      '@types': path.resolve(__dirname, './src/types'),
    },
  },
  
  // Development server with API proxy
  server: {
    port: 5173,
    host: true,
    proxy: {
      '/api': {
        target: process.env.VITE_API_BASE_URL || 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
      },
    },
  },
  
  // Optimized build configuration
  build: {
    outDir: 'dist',
    sourcemap: true,
    target: 'esnext',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
          bootstrap: ['bootstrap', 'react-bootstrap'],
          query: ['react-query'],
        },
      },
    },
  },
})
```

## Environment Variables
Use environment variables for configuration:

```bash
# .env.development
VITE_API_BASE_URL=http://localhost:8000
VITE_APP_NAME=Donations Management System
VITE_APP_VERSION=1.0.0
VITE_ENVIRONMENT=development

# .env.production
VITE_API_BASE_URL=https://api.donations.example.com
VITE_APP_NAME=Donations Management System
VITE_APP_VERSION=1.0.0
VITE_ENVIRONMENT=production

# .env.example
VITE_API_BASE_URL=http://localhost:8000
VITE_APP_NAME=Donations Management System
VITE_APP_VERSION=1.0.0
VITE_ENVIRONMENT=development
```

## Path Aliases Usage
Use configured path aliases consistently:

```javascript
// Good: Using path aliases
import { DonationService } from '@core/services/DonationService'
import { DonationCard } from '@components/donation/DonationCard'
import { useDonations } from '@hooks/useDonations'
import { Container } from '@components/layout/Container'

// Avoid: Relative imports for cross-directory access
import { DonationService } from '../../../core/services/DonationService'
```

## Build Scripts
Use package.json scripts for development and deployment:

```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext js,jsx --fix",
    "format": "prettier --write \"src/**/*.{js,jsx,json,css,md}\"",
    "test": "vitest",
    "test:coverage": "vitest run --coverage",
    "analyze": "vite build --mode analyze"
  }
}
```

## Docker Build
Use multi-stage Docker build for production:

```dockerfile
# Dockerfile
FROM node:18-alpine as builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

## Nginx Configuration
Configure nginx for SPA routing:

```nginx
# nginx.conf
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml text/javascript;

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Handle SPA routing
    location / {
        try_files $uri $uri/ /index.html;
    }

    # API proxy (if needed)
    location /api/ {
        proxy_pass http://backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
```

## Netlify Deployment
Configure Netlify deployment:

```toml
# netlify.toml
[build]
  publish = "dist"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "18"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "max-age=31536000"
```

## Performance Optimization
- **Code Splitting**: Use dynamic imports for route-based splitting
- **Lazy Loading**: Implement lazy loading for non-critical components
- **Bundle Analysis**: Use `npm run analyze` to check bundle sizes
- **Asset Optimization**: Optimize images and use appropriate formats

```javascript
// Route-based code splitting
import { lazy, Suspense } from 'react'
import { LoadingSpinner } from '@components/ui/LoadingSpinner'

const DonationsPage = lazy(() => import('@pages/DonationsPage'))

function App() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <Routes>
        <Route path="/donations" element={<DonationsPage />} />
      </Routes>
    </Suspense>
  )
}
```

## Development Workflow
1. **Development**: `npm run dev` - Start development server with HMR
2. **Linting**: `npm run lint` - Check code quality
3. **Testing**: `npm run test` - Run tests in watch mode
4. **Build**: `npm run build` - Create production build
5. **Preview**: `npm run preview` - Preview production build locally
6. **Deploy**: Build and deploy to chosen platform

## Build Verification
After building, verify:
- All routes work correctly (SPA routing)
- API calls connect to correct backend
- Static assets load properly
- Environment variables are set correctly
- Bundle sizes are reasonable
- Source maps are generated for debugging

## CI/CD Integration
```yaml
# .github/workflows/deploy.yml
name: Deploy Frontend
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: npm run lint
      - run: npm run test
      - run: npm run build
      - run: npm run preview # Verify build works
```